2/09 メモ

今日やったこと

main関数の叩き台をだいたいつくった
すこし希望が見えた

これ以降やること

バスとリストを全部捜査するのつらぽよだからどうにかしたい(人数によってはどうでもいい)

完了 バスのリストと各種関数を実装する(人を下ろす，人の座標を動かす，人を載せる，)
完了きちんと自分で自殺できるように人側で設定する

2.データを読み込めるようにする(フォーマットを決めたり，フォーマットを受け取ってコンストラクタに渡したりとか)
4.バスから人を下ろす，バスを走らせる，isgoingtoの定義，乗るべきバスかどうかの判定
5.描画のめどを立てる
(乗り換え計算はできたらやる)

2/08 メモ

点のクラス
・待っている人数
・アトラクタの有無

バスのクラス
・バスの定員
・今載っている人数
・運行路(いくつかパターン決めとかないと死ぬ)

客のクラス
・どこで待ってるか
・どこに行きたいか
・どれくらい待ってるか
・乗るかどうかの判断関数/来たバスの運行路に自分の行きたい場所があったら乗る


——

バスの運行状況を変えるのではなくて，
この路線にx本，この路線にy本，という感じ(x,yを定める)
路線の形は予めキメておく or 路線の形を自分で作る

最適化するもの：客の待ち時間(の平均)
路線が固定されていれば，その気になれば，全ての通りを尽くして計算することで最小な解を出せる

——

点のクラス
・辺の重み

バスのクラス
・バスの定員
・今載っている人数
・運行路 ( とりあえずプリセット，エディットは後で考える )

客のクラス
・どこで待ってるか
・どこに行きたいか
・どれくらい待ってるか
・乗るかどうかの判断関数/来たバスの運行路に自分の行きたい場所があったら乗る


——

・乗り換えの計算をさせる必要性
現在地とバスの運行路線と目的地から乗り換えポイントを求める

——

・A.一番最初にパラメタ(どの路線に何本)の入力受付をやる(ライブラリはありそうだし，頑張ればフルスクラッチでもいけそう)

・classの情報をとって，B.計算 C.描画

・入力受付(A)と描画(C)はライブラリを合わせるべき，

——

とりあえず作って，安心して，破壊的変更がおこらない範囲で各種文献を参考にして，どうしようもなくなったら破壊する．
ロジック部分は先に作ってしまえ

クラスを作る人
そのあとABC(多少の破壊的変更は恐れない

2/01 メモ

・A.一番最初にパラメタの入力受付をやる(ライブラリはありそうだし，頑張ればフルスクラッチでもいけそう)

・問題設定をはっきりさせる所が大事
    ー誰かが一度考えたネタな気がする 適切な本がある気がしている
    ーその本からうまくモデルを取り出すこと

・基本はclassの配列
    ー各タイルの属性，(いま何人いるか，隣のタイルが何人いるか，バス停があるかないか，観光地があるかないか，)

・classの情報をとって，B.計算(run) C.描画(draw)

・入力受付(A)と描画(C)はライブラリを合わせるべき，

・git(えのきだがなんとかします)

・発表用ポスターは直前でなんとかなる気がする

・厳密解の計算は4月以降でいいよね
